// Generated by CoffeeScript 1.9.1
(function() {
  var Cell, Fps, Gem, GemFactory, Grid, Input, Logger, Main,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Cell = (function() {
    function Cell(x, y, main) {
      this.x = x;
      this.y = y;
      this.main = main;
      this.gem = this.main.gem_factory.random();
      this.gem.setX(this.xPos());
      this.gem.setY(this.yPos());
      this.buildSquare();
    }

    Cell.prototype.xPos = function() {
      return this.x + 0.5;
    };

    Cell.prototype.yPos = function() {
      return this.y + 0.5;
    };

    Cell.prototype.commitNew = function() {
      this.gem = this.new_gem;
      return this.new_gem = null;
    };

    Cell.prototype.swapGems = function(cell) {
      this.new_gem = cell.gem;
      cell.new_gem = this.gem;
      if (this.willClear() || cell.willClear()) {
        this.new_gem.doSwap(this.xPos(), this.yPos());
        cell.new_gem.doSwap(cell.xPos(), cell.yPos());
        this.commitNew();
        return cell.commitNew();
      } else {
        this.new_gem.doSwap(this.xPos(), this.yPos(), false);
        cell.new_gem.doSwap(cell.xPos(), cell.yPos(), false);
        this.new_gem = null;
        return cell.new_gem = null;
      }
    };

    Cell.prototype.horizontalMatches = function() {
      return [this.new_gem].concat(this.match(this.new_gem.id, 'left').concat(this.match(this.new_gem.id, 'right')));
    };

    Cell.prototype.verticalMatches = function() {
      return [this.new_gem].concat(this.match(this.new_gem.id, 'up').concat(this.match(this.new_gem.id, 'down')));
    };

    Cell.prototype.willClear = function() {
      return this.horizontalMatches().length >= 3 || this.verticalMatches().length >= 3;
    };

    Cell.prototype.match = function(id, dir) {
      var cell, gem;
      cell = (function() {
        var ref, ref1, ref2, ref3;
        switch (dir) {
          case 'left':
            return (ref = this.main.grid.cells[this.x - 1]) != null ? ref[this.y] : void 0;
          case 'right':
            return (ref1 = this.main.grid.cells[this.x + 1]) != null ? ref1[this.y] : void 0;
          case 'up':
            return (ref2 = this.main.grid.cells[this.x]) != null ? ref2[this.y + 1] : void 0;
          case 'down':
            return (ref3 = this.main.grid.cells[this.x]) != null ? ref3[this.y - 1] : void 0;
        }
      }).call(this);
      if (!cell) {
        return [];
      }
      gem = cell.new_gem || cell.gem;
      if (gem.id === id) {
        return [gem].concat(cell.match(id, dir));
      } else {
        return [];
      }
    };

    Cell.prototype.squareOpacity = function() {
      if (this.y % 2 !== this.x % 2) {
        return 0.2;
      } else {
        return 0.5;
      }
    };

    Cell.prototype.buildSquare = function() {
      var geom, mat;
      mat = new THREE.MeshBasicMaterial({
        transparent: true,
        opacity: this.squareOpacity(),
        color: 'gray'
      });
      geom = new THREE.PlaneBufferGeometry(1, 1);
      this.square = new THREE.Mesh(geom, mat);
      this.square.position.x = this.xPos();
      return this.square.position.y = this.yPos();
    };

    Cell.prototype.highlite = function(t) {
      this.gem.object.rotation.z = Math.PI * 2 - t / 400 % Math.PI * 2;
      this.gem.object.scale.x = 1.25;
      return this.gem.object.scale.y = 1.25;
    };

    Cell.prototype.reset = function() {
      this.gem.object.rotation.z = 0;
      this.gem.object.scale.x = 1;
      return this.gem.object.scale.y = 1;
    };

    return Cell;

  })();

  Fps = (function() {
    function Fps() {
      this.refresh = 1000;
      this.frames = 0;
      this.lasttime = 0;
    }

    Fps.prototype.timeDiff = function(t) {
      return t - this.lasttime;
    };

    Fps.prototype.update = function(t) {
      var fps;
      this.frames++;
      if (this.timeDiff(t) > this.refresh) {
        fps = Math.floor(this.frames / (this.timeDiff(t) / 100000)) / 100;
        document.getElementById('fps').innerText = "fps: " + fps;
        this.frames = 0;
        return this.lasttime = t;
      }
    };

    return Fps;

  })();

  Gem = (function() {
    function Gem(def) {
      this.tweenTick = bind(this.tweenTick, this);
      this.animationComplete = bind(this.animationComplete, this);
      this.id = def.id;
      this.object = new THREE.Object3D();
      this.mesh = new THREE.Mesh(def.geometry, def.material);
      this.outline = new THREE.Mesh(def.geometry, def.outline);
      this.outline.scale.multiplyScalar(1.125);
      this.animating = false;
      this.object.add(this.mesh);
      this.object.add(this.outline);
    }

    Gem.prototype.setX = function(x) {
      return this.object.position.x = x;
    };

    Gem.prototype.setY = function(y) {
      return this.object.position.y = y;
    };

    Gem.prototype.animationComplete = function() {
      return this.animating = false;
    };

    Gem.prototype.doSwap = function(x, y, real) {
      var t, t2;
      if (real == null) {
        real = true;
      }
      this.animating = true;
      this.tween_data = {
        x: this.object.position.x,
        y: this.object.position.y,
        s: 1
      };
      if (real) {
        this.tweens = this.swapTweens(x, y);
        this.tweens.zoom_tween.start();
        return this.tweens.swap_tween.onComplete(this.animationComplete).start();
      } else {
        t = this.swapTweens(x, y);
        t2 = this.swapTweens(this.object.position.x, this.object.position.y);
        return this.tweens = {
          zoom_tween: t.zoom_tween.chain(t2.zoom_tween).start(),
          swap_tween: t.swap_tween.chain(t2.swap_tween).onComplete(this.animationComplete).start()
        };
      }
    };

    Gem.prototype.swapTweens = function(x, y, front) {
      var length, sc, swap_tween, zoom_tween_end, zoom_tween_start;
      if (front == null) {
        front = true;
      }
      length = 500;
      sc = front ? 0.2 : -0.2;
      swap_tween = new TWEEN.Tween(this.tween_data).to({
        x: x,
        y: y
      }, length).easing(TWEEN.Easing.Back.InOut).onUpdate(this.tweenTick);
      zoom_tween_start = new TWEEN.Tween(this.tween_data).to({
        s: 1 + sc
      }, length / 2).easing(TWEEN.Easing.Quadratic.Out).onUpdate(this.tweenTick);
      zoom_tween_end = new TWEEN.Tween(this.tween_data).to({
        s: 1
      }, length / 2).easing(TWEEN.Easing.Quadratic.In).onUpdate(this.tweenTick);
      return {
        zoom_tween: zoom_tween_start.chain(zoom_tween_end),
        swap_tween: swap_tween
      };
    };

    Gem.prototype.tweenTick = function() {
      this.object.position.x = this.tween_data.x;
      this.object.position.y = this.tween_data.y;
      this.object.position.z = this.tween_data.s - 1;
      this.object.scale.x = this.tween_data.s;
      return this.object.scale.y = this.tween_data.s;
    };

    return Gem;

  })();

  GemFactory = (function() {
    function GemFactory() {
      this.gemsLoaded = bind(this.gemsLoaded, this);
      this.loaded = false;
      this.jsonloader = new THREE.JSONLoader();
      this.scalefactor = 1.125;
      this.outline = new THREE.MeshBasicMaterial({
        color: 'black',
        side: THREE.BackSide
      });
      this.loadGems();
    }

    GemFactory.prototype.loadGems = function() {
      this.req = new XMLHttpRequest();
      this.req.onload = this.gemsLoaded;
      this.req.open("GET", 'models/gems.json');
      return this.req.send();
    };

    GemFactory.prototype.gemsLoaded = function() {
      var gem, i, json;
      json = JSON.parse(this.req.responseText);
      this.defs = (function() {
        var j, len, results;
        results = [];
        for (i = j = 0, len = json.length; j < len; i = ++j) {
          gem = json[i];
          results.push({
            id: i,
            geometry: this.buildGeometry(gem.geometry),
            material: this.buildMaterial(gem.color),
            outline: this.outline
          });
        }
        return results;
      }).call(this);
      this.loaded = true;
      return this.onload();
    };

    GemFactory.prototype.buildGeometry = function(def) {
      var geom, r, rx, s;
      geom = this.jsonloader.parse(def).geometry;
      rx = new THREE.Matrix4().makeRotationX(Math.PI / 2);
      s = new THREE.Matrix4().makeScale(this.scalefactor, this.scalefactor, this.scalefactor);
      r = new THREE.Matrix4().multiplyMatrices(rx, s);
      geom.applyMatrix(r);
      return new THREE.BufferGeometry().fromGeometry(geom);
    };

    GemFactory.prototype.buildMaterial = function(color) {
      return new THREE.MeshPhongMaterial({
        color: color,
        ambient: color,
        shininess: 60
      });
    };

    GemFactory.prototype.buildGem = function(def) {
      return new Gem(def);
    };

    GemFactory.prototype.random = function() {
      return this.buildGem(this.defs[Math.floor(Math.random() * this.defs.length)]);
    };

    GemFactory.prototype.onload = function() {};

    return GemFactory;

  })();

  Grid = (function() {
    function Grid(w, h, main) {
      this.w = w;
      this.h = h;
      this.main = main;
      this.margin = 0.25;
      this.cells = this.buildCells();
      this.object = new THREE.Object3D();
      this.ready_for_input = true;
      this.buildBoard();
      this.object.position.x = this.boardScale(this.margin);
      this.object.position.y = this.boardScale(this.margin);
      this.object.scale.multiplyScalar(this.boardScale());
    }

    Grid.prototype.animating = function() {
      var cell, j, k, len, len1, ref, row;
      ref = this.cells;
      for (j = 0, len = ref.length; j < len; j++) {
        row = ref[j];
        for (k = 0, len1 = row.length; k < len1; k++) {
          cell = row[k];
          if (cell.gem.animating) {
            return true;
          }
        }
      }
      return false;
    };

    Grid.prototype.update = function(t) {
      var current, ref, ref1;
      if (this.ready_for_input && this.main.input.touching) {
        this.selected = this.touchedCell(this.main.input.start);
        current = this.touchedCell(this.main.input.move);
        if (!this.validMove(this.selected, current)) {
          return this.stopInput();
        }
        if (this.selected === current) {
          if ((ref = this.selected) != null) {
            ref.highlite(t);
          }
        } else {
          this.stopInput();
          this.selected.swapGems(current);
        }
      }
      if (!this.main.input.touching && !this.animating()) {
        if (this.selected) {
          this.selected.reset();
          this.selected = null;
        }
        this.ready_for_input = true;
        return (ref1 = this.selected) != null ? ref1.reset() : void 0;
      }
    };

    Grid.prototype.validMove = function(cell1, cell2) {
      return cell1 && cell2 && (Math.abs(cell1.x - cell2.x) + Math.abs(cell1.y - cell2.y)) <= 1;
    };

    Grid.prototype.stopInput = function() {
      var ref;
      this.ready_for_input = false;
      return (ref = this.selected) != null ? ref.reset() : void 0;
    };

    Grid.prototype.topOffset = function() {
      return this.main.realHeight() - this.boardScale(this.h + this.margin);
    };

    Grid.prototype.touchedCell = function(pos) {
      var ref, x, y;
      x = Math.floor(pos.x / this.boardScale() - this.margin);
      y = this.h - 1 - Math.floor((pos.y - this.topOffset()) / this.boardScale());
      return (ref = this.cells[x]) != null ? ref[y] : void 0;
    };

    Grid.prototype.boardScale = function(i) {
      if (i == null) {
        i = 1;
      }
      return this.main.realWidth() / (this.w + this.margin * 2) * i;
    };

    Grid.prototype.buildBoard = function() {
      var cell, j, len, ref, results, row;
      ref = this.cells;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        row = ref[j];
        results.push((function() {
          var k, len1, results1;
          results1 = [];
          for (k = 0, len1 = row.length; k < len1; k++) {
            cell = row[k];
            this.object.add(cell.square);
            results1.push(this.object.add(cell.gem.object));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Grid.prototype.buildCells = function() {
      var j, ref, results, x, y;
      results = [];
      for (x = j = 0, ref = this.h; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        results.push((function() {
          var k, ref1, results1;
          results1 = [];
          for (y = k = 0, ref1 = this.w; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
            results1.push(new Cell(x, y, this.main));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return Grid;

  })();

  document.addEventListener('deviceready', function() {
    return new Main();
  });

  Input = (function() {
    function Input() {
      this.updateOrientation = bind(this.updateOrientation, this);
      this.touchMove = bind(this.touchMove, this);
      this.touchEnd = bind(this.touchEnd, this);
      this.touchStart = bind(this.touchStart, this);
      this.touching = false;
      this.bindEvents();
      this.start = {
        x: null,
        y: null
      };
      this.move = {
        x: null,
        y: null
      };
      this.orientation = {
        alpha: 0,
        beta: 0,
        gamma: 0
      };
    }

    Input.prototype.bindEvents = function() {
      window.addEventListener('touchstart', this.touchStart);
      window.addEventListener('touchend', this.touchEnd);
      window.addEventListener('touchmove', this.touchMove);
      return window.addEventListener('deviceorientation', this.updateOrientation);
    };

    Input.prototype.touchStart = function(e) {
      this.touching = true;
      this.start.x = e.touches[0].screenX * window.devicePixelRatio;
      this.start.y = e.touches[0].screenY * window.devicePixelRatio;
      return this.move = {
        x: this.start.x,
        y: this.start.y
      };
    };

    Input.prototype.touchEnd = function(e) {
      return this.touching = false;
    };

    Input.prototype.touchMove = function(e) {
      this.move.x = e.touches[0].screenX * window.devicePixelRatio;
      return this.move.y = e.touches[0].screenY * window.devicePixelRatio;
    };

    Input.prototype.updateOrientation = function(orientation) {
      this.orientation.alpha = orientation.alpha || 0;
      this.orientation.gamma = orientation.gamma || 0;
      return this.orientation.beta = orientation.beta || 0;
    };

    return Input;

  })();

  Logger = (function() {
    function Logger() {
      this.loglines = [];
    }

    Logger.prototype.log = function(text) {
      this.loglines.push(text);
      return document.getElementById('log').innerText = this.loglines.join("\n");
    };

    return Logger;

  })();

  Main = (function() {
    function Main() {
      this.renderLoop = bind(this.renderLoop, this);
      this.gemsLoaded = bind(this.gemsLoaded, this);
      this.grid_width = 8;
      this.grid_height = 8;
      this.logger = new Logger();
      this.logger.log("logger started");
      this.fps = new Fps();
      this.input = new Input();
      this.logger.log('init three');
      this.initThree();
      this.drawBackground();
      this.gem_factory = new GemFactory();
      this.gem_factory.onload = this.gemsLoaded;
    }

    Main.prototype.realWidth = function() {
      return window.innerWidth * window.devicePixelRatio;
    };

    Main.prototype.realHeight = function() {
      return window.innerHeight * window.devicePixelRatio;
    };

    Main.prototype.aspect = function() {
      return window.innerWidth / window.innerHeight;
    };

    Main.prototype.initThree = function() {
      document.body.style.zoom = 1 / window.devicePixelRatio;
      this.scene = new THREE.Scene();
      this.camera = new THREE.OrthographicCamera(0, this.realWidth(), this.realHeight(), 0, 0, 5000);
      this.camera.position.z = 500;
      this.camera.updateProjectionMatrix();
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(this.realWidth(), this.realHeight());
      document.body.appendChild(this.renderer.domElement);
      this.scene.add(new THREE.AmbientLight(0x666666));
      this.light = new THREE.DirectionalLight(0xffffff, 1);
      this.light.position.z = 100;
      this.light.position.x = 60;
      this.light.position.y = 60;
      return this.scene.add(this.light);
    };

    Main.prototype.drawBackground = function() {
      var background, bg, bgg;
      bg = new THREE.MeshLambertMaterial({
        map: THREE.ImageUtils.loadTexture('img/wallpaper.png')
      });
      bgg = new THREE.PlaneBufferGeometry(this.realHeight(), this.realHeight());
      background = new THREE.Mesh(bgg, bg);
      background.position.x = this.realWidth() / 2;
      background.position.y = this.realHeight() / 2;
      background.position.z = -1000;
      return this.scene.add(background);
    };

    Main.prototype.gemsLoaded = function() {
      this.logger.log("gems loaded");
      this.grid = new Grid(this.grid_width, this.grid_height, this);
      this.scene.add(this.grid.object);
      return this.renderLoop(0);
    };

    Main.prototype.updateLight = function() {
      this.light.position.x = (this.input.orientation.gamma * -1) + 60;
      return this.light.position.y = this.input.orientation.beta + 60;
    };

    Main.prototype.renderLoop = function(t) {
      requestAnimationFrame(this.renderLoop);
      TWEEN.update(t);
      this.updateLight();
      this.grid.update(t);
      this.renderer.render(this.scene, this.camera);
      return this.fps.update(t);
    };

    return Main;

  })();

}).call(this);
