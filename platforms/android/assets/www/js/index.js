// Generated by CoffeeScript 1.9.1
(function() {
  var AudioLoader, AudioManager, Background, Cell, Fps, Gem, GemFactory, Grid, Input, Logger, Main, Menu, RoamingLight, Score, Timer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AudioLoader = (function() {
    function AudioLoader(file) {
      this.loadBuffer = bind(this.loadBuffer, this);
      this.fileLoaded = bind(this.fileLoaded, this);
      this.file = file;
      this.loaded = false;
      this.context = new AudioContext();
      this.loadFile(file);
    }

    AudioLoader.prototype.name = function() {
      return this.file.split('/').pop().split('.')[0];
    };

    AudioLoader.prototype.loadFile = function(file) {
      this.request = new XMLHttpRequest();
      this.request.open('GET', file, true);
      this.request.responseType = 'arraybuffer';
      this.request.onload = this.fileLoaded;
      return this.request.send();
    };

    AudioLoader.prototype.fileLoaded = function() {
      return this.context.decodeAudioData(this.request.response, this.loadBuffer);
    };

    AudioLoader.prototype.loadBuffer = function(buffer) {
      this.buffer = buffer;
      this.loaded = true;
      return this.onload();
    };

    AudioLoader.prototype.onload = function() {};

    return AudioLoader;

  })();

  AudioManager = (function() {
    function AudioManager(files) {
      this.fileLoaded = bind(this.fileLoaded, this);
      this.context = new AudioContext();
      this.buffers = {};
      this.buildNodes();
      this.buildGraph();
      this.audio_loaders = this.loadFiles(files);
    }

    AudioManager.prototype.buildNodes = function() {
      return this.nodes = {
        destination: this.context.destination,
        masterGain: this.context.createGain(),
        backgroundMusicGain: this.context.createGain(),
        coreEffectsGain: this.context.createGain(),
        effectsGain: this.context.createGain(),
        pausedEffectsGain: this.context.createGain()
      };
    };

    AudioManager.prototype.buildGraph = function() {
      this.nodes.masterGain.connect(this.nodes.destination);
      this.nodes.backgroundMusicGain.connect(this.nodes.masterGain);
      this.nodes.coreEffectsGain.connect(this.nodes.masterGain);
      this.nodes.effectsGain.connect(this.nodes.coreEffectsGain);
      return this.nodes.pausedEffectsGain.connect(this.nodes.coreEffectsGain);
    };

    AudioManager.prototype.loadFiles = function(files) {
      var af, file, j, len, results;
      results = [];
      for (j = 0, len = files.length; j < len; j++) {
        file = files[j];
        af = new AudioLoader(file);
        af.onload = this.fileLoaded;
        results.push(af);
      }
      return results;
    };

    AudioManager.prototype.allLoaded = function() {
      var f, j, len, ref;
      ref = this.audio_loaders;
      for (j = 0, len = ref.length; j < len; j++) {
        f = ref[j];
        if (f.loaded === false) {
          return false;
        }
      }
      return true;
    };

    AudioManager.prototype.fileLoaded = function() {
      var f, j, len, ref;
      if (this.allLoaded()) {
        ref = this.audio_loaders;
        for (j = 0, len = ref.length; j < len; j++) {
          f = ref[j];
          this.buffers[f.name()] = f.buffer;
        }
        return this.onload();
      }
    };

    AudioManager.prototype.play = function(name) {
      var source;
      if (!this.buffers[name]) {
        return;
      }
      source = this.context.createBufferSource();
      source.buffer = this.buffers[name];
      source.connect(this.nodes.effectsGain);
      source.loop = false;
      return source.start();
    };

    AudioManager.prototype.onload = function() {};

    return AudioManager;

  })();

  Background = (function() {
    function Background() {
      this.drawBackground();
    }

    Background.prototype.drawBackground = function() {
      var bg, bgg;
      bg = new THREE.MeshLambertMaterial({
        map: THREE.ImageUtils.loadTexture('img/wallpaper.png')
      });
      bgg = new THREE.PlaneBufferGeometry(GEMGAME.realHeight(), GEMGAME.realHeight());
      this.object = new THREE.Mesh(bgg, bg);
      this.object.position.x = GEMGAME.realWidth() / 2;
      this.object.position.y = GEMGAME.realHeight() / 2;
      return this.object.position.z = -100000;
    };

    return Background;

  })();

  Cell = (function() {
    function Cell(x, y) {
      this.tweenTick = bind(this.tweenTick, this);
      this.x = x;
      this.y = y;
      this.buildSquare();
    }

    Cell.prototype.xPos = function() {
      return this.x + 0.5;
    };

    Cell.prototype.yPos = function() {
      return this.y + 0.5;
    };

    Cell.prototype.commitNew = function() {
      this.gem = this.new_gem;
      return this.new_gem = null;
    };

    Cell.prototype.flagCleared = function() {
      var j, k, len, len1, m, ref, ref1;
      if (this.horizontalMatches().length >= 3) {
        GEMGAME.score.add(this.horizontalMatches().length);
        ref = this.horizontalMatches();
        for (j = 0, len = ref.length; j < len; j++) {
          m = ref[j];
          m.doomed = true;
        }
      }
      if (this.verticalMatches().length >= 3) {
        GEMGAME.score.add(this.verticalMatches().length);
        ref1 = this.verticalMatches();
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          m = ref1[k];
          m.doomed = true;
        }
      }
      return this.dirty = false;
    };

    Cell.prototype.swapGems = function(cell) {
      this.new_gem = cell.gem;
      cell.new_gem = this.gem;
      if (this.willClear() || cell.willClear()) {
        this.new_gem.doSwap(this.xPos(), this.yPos(), true, false);
        cell.new_gem.doSwap(cell.xPos(), cell.yPos(), true, true);
        this.commitNew();
        cell.commitNew();
        this.flagCleared();
        return cell.flagCleared();
      } else {
        this.new_gem.doSwap(this.xPos(), this.yPos(), false, false);
        cell.new_gem.doSwap(cell.xPos(), cell.yPos(), false, true);
        this.new_gem = null;
        return cell.new_gem = null;
      }
    };

    Cell.prototype.matchGem = function() {
      return this.new_gem || this.gem;
    };

    Cell.prototype.horizontalMatches = function() {
      return [this.matchGem()].concat(this.match(this.matchGem().def_id, 'left')).concat(this.match(this.matchGem().def_id, 'right'));
    };

    Cell.prototype.verticalMatches = function() {
      return [this.matchGem()].concat(this.match(this.matchGem().def_id, 'up')).concat(this.match(this.matchGem().def_id, 'down'));
    };

    Cell.prototype.willClear = function() {
      return this.horizontalMatches().length >= 3 || this.verticalMatches().length >= 3;
    };

    Cell.prototype.match = function(def_id, dir) {
      var cell, ref;
      cell = (function() {
        var ref, ref1, ref2, ref3;
        switch (dir) {
          case 'left':
            return (ref = GEMGAME.grid.cells[this.x - 1]) != null ? ref[this.y] : void 0;
          case 'right':
            return (ref1 = GEMGAME.grid.cells[this.x + 1]) != null ? ref1[this.y] : void 0;
          case 'up':
            return (ref2 = GEMGAME.grid.cells[this.x]) != null ? ref2[this.y + 1] : void 0;
          case 'down':
            return (ref3 = GEMGAME.grid.cells[this.x]) != null ? ref3[this.y - 1] : void 0;
        }
      }).call(this);
      if (!cell) {
        return [];
      }
      if (((ref = cell.matchGem()) != null ? ref.def_id : void 0) === def_id) {
        return [cell.matchGem()].concat(cell.match(def_id, dir));
      } else {
        return [];
      }
    };

    Cell.prototype.squareOpacity = function() {
      if (this.y % 2 !== this.x % 2) {
        return 0.2;
      } else {
        return 0.5;
      }
    };

    Cell.prototype.squareAxis = function() {
      if (this.y % 2 !== this.x % 2) {
        return 'x';
      } else {
        return 'y';
      }
    };

    Cell.prototype.hide = function() {
      return this.square.rotation[this.squareAxis()] = Math.PI / 2;
    };

    Cell.prototype.show = function() {
      var show_tween;
      this.tween_data = {
        r: this.square.rotation[this.squareAxis()]
      };
      show_tween = new TWEEN.Tween(this.tween_data).to({
        r: 0
      }, 1500).easing(TWEEN.Easing.Quartic.In).onUpdate(this.tweenTick);
      return show_tween.start();
    };

    Cell.prototype.tweenTick = function() {
      return this.square.rotation[this.squareAxis()] = this.tween_data.r;
    };

    Cell.prototype.buildSquare = function() {
      var geom, mat;
      mat = new THREE.MeshBasicMaterial({
        transparent: true,
        opacity: this.squareOpacity(),
        color: 'gray'
      });
      geom = new THREE.PlaneBufferGeometry(1, 1);
      this.square = new THREE.Mesh(geom, mat);
      this.square.position.x = this.xPos();
      this.square.position.y = this.yPos();
      return this.square.rotation[this.squareAxis()] = Math.PI / 2;
    };

    Cell.prototype.highlite = function(t) {
      var ref;
      return (ref = this.gem) != null ? ref.highlite(t) : void 0;
    };

    Cell.prototype.reset = function() {
      var ref;
      return (ref = this.gem) != null ? ref.reset() : void 0;
    };

    return Cell;

  })();

  Fps = (function() {
    function Fps() {
      this.refresh = 1000;
      this.frames = 0;
      this.lasttime = 0;
    }

    Fps.prototype.timeDiff = function(t) {
      return t - this.lasttime;
    };

    Fps.prototype.update = function(t) {
      var fps;
      this.frames++;
      if (this.timeDiff(t) > this.refresh) {
        fps = Math.floor(this.frames / (this.timeDiff(t) / 100000)) / 100;
        document.getElementById('fps').innerText = "fps: " + fps;
        this.frames = 0;
        return this.lasttime = t;
      }
    };

    return Fps;

  })();

  Gem = (function() {
    function Gem(def, id) {
      this.tweenTick = bind(this.tweenTick, this);
      this.animationComplete = bind(this.animationComplete, this);
      this.hurlTweenComplete = bind(this.hurlTweenComplete, this);
      this.hurlTweenTick = bind(this.hurlTweenTick, this);
      this.hurlStart = bind(this.hurlStart, this);
      var i;
      this.id = id;
      this.def = def;
      this.def_id = def.id;
      this.object = new THREE.Object3D();
      this.mesh = new THREE.Mesh(def.geometry, def.material);
      this.outline = new THREE.Mesh(def.geometry, def.outline);
      this.chunks = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 3; i = ++j) {
          results.push(this.buildChunk());
        }
        return results;
      }).call(this);
      this.outline.scale.multiplyScalar(1.125);
      this.animating = false;
      this.object.add(this.mesh);
      this.object.add(this.outline);
      this.swap_length = 400;
    }

    Gem.prototype.setX = function(x) {
      return this.object.position.x = x;
    };

    Gem.prototype.setY = function(y) {
      return this.object.position.y = y;
    };

    Gem.prototype.buildChunk = function() {
      var mesh, object, outline;
      object = new THREE.Object3D();
      mesh = new THREE.Mesh(this.def.chunk, this.def.material);
      outline = new THREE.Mesh(this.def.chunk, this.def.outline);
      outline.scale.multiplyScalar(1.125);
      object.add(mesh);
      object.add(outline);
      object.rotation.set(Math.PI * 2 * Math.random(), Math.PI * 2 * Math.random(), Math.PI * 2 * Math.random());
      object.position.z = -1;
      return object;
    };

    Gem.prototype.explode = function(delay) {
      var chunk, j, len, ref;
      if (delay == null) {
        delay = 0;
      }
      ref = this.chunks;
      for (j = 0, len = ref.length; j < len; j++) {
        chunk = ref[j];
        this.object.add(chunk);
      }
      return this.hurlChunks(delay);
    };

    Gem.prototype.removeGem = function() {
      this.object.remove(this.mesh);
      return this.object.remove(this.outline);
    };

    Gem.prototype.hurlStart = function() {
      var chunk, j, len, ref;
      this.removeGem();
      ref = this.chunks;
      for (j = 0, len = ref.length; j < len; j++) {
        chunk = ref[j];
        chunk.position.z = 1;
      }
      return GEMGAME.audio.play('pop');
    };

    Gem.prototype.hurlChunks = function(delay) {
      var chunk, d, hurl_tween, th;
      this.hurl_tween = {
        x0: this.chunks[0].position.x,
        y0: this.chunks[0].position.y,
        x1: this.chunks[1].position.x,
        y1: this.chunks[1].position.y,
        x2: this.chunks[2].position.x,
        y2: this.chunks[2].position.y,
        x3: this.chunks[3].position.x,
        y3: this.chunks[3].position.y,
        s: 1
      };
      d = (function() {
        var j, len, ref, results;
        ref = this.chunks;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          chunk = ref[j];
          results.push(this.randomDest());
        }
        return results;
      }).call(this);
      th = {
        x0: d[0].x,
        y0: d[0].y,
        x1: d[1].x,
        y1: d[1].y,
        x2: d[2].x,
        y2: d[2].y,
        x3: d[3].x,
        y3: d[3].y,
        s: 6
      };
      hurl_tween = new TWEEN.Tween(this.hurl_tween).to(th, 1500).easing(TWEEN.Easing.Linear.None).onStart(this.hurlStart).onUpdate(this.hurlTweenTick).onComplete(this.hurlTweenComplete).delay(delay);
      return hurl_tween.start();
    };

    Gem.prototype.randomDest = function() {
      var ra, rx, ry;
      ra = Math.PI * 2 * Math.random();
      rx = Math.sin(ra) * GEMGAME.grid_height * (1 + Math.random());
      ry = Math.cos(ra) * GEMGAME.grid_height * (1 + Math.random());
      return {
        x: rx,
        y: ry
      };
    };

    Gem.prototype.hurlTweenTick = function() {
      var i, j, results;
      results = [];
      for (i = j = 0; j <= 3; i = ++j) {
        this.chunks[i].rotation.x += this.hurl_tween["x" + i] - this.chunks[i].position.x;
        this.chunks[i].rotation.y += this.hurl_tween["y" + i] - this.chunks[i].position.y;
        this.chunks[i].position.x = this.hurl_tween["x" + i];
        this.chunks[i].position.y = this.hurl_tween["y" + i];
        this.chunks[i].scale.x = this.hurl_tween.s;
        this.chunks[i].scale.y = this.hurl_tween.s;
        results.push(this.chunks[i].scale.z = this.hurl_tween.s);
      }
      return results;
    };

    Gem.prototype.hurlTweenComplete = function() {
      return GEMGAME.grid.object.remove(this.object);
    };

    Gem.prototype.animationComplete = function() {
      this.object.position.z = 0;
      return this.animating = false;
    };

    Gem.prototype.dropTo = function(y, delay, z, length) {
      var drop_tween;
      if (length == null) {
        length = 1250;
      }
      this.animating = true;
      this.tween_data = {
        x: this.object.position.x,
        y: this.object.position.y,
        s: 1,
        z: z
      };
      drop_tween = new TWEEN.Tween(this.tween_data).to({
        y: y
      }, length).easing(TWEEN.Easing.Bounce.Out).onUpdate(this.tweenTick);
      return drop_tween.onComplete(this.animationComplete).delay(delay).start();
    };

    Gem.prototype.doSwap = function(x, y, real, front) {
      if (real == null) {
        real = true;
      }
      if (front == null) {
        front = true;
      }
      this.animating = true;
      this.tween_data = {
        x: this.object.position.x,
        y: this.object.position.y,
        s: 1,
        z: 0
      };
      if (real) {
        this.zoomTween(front).start();
        return this.realSwapTween(x, y).start();
      } else {
        this.failedZoomTween(front).start();
        return this.failedSwapTween(x, y).start();
      }
    };

    Gem.prototype.swapStart = function() {
      return GEMGAME.audio.play('woosh');
    };

    Gem.prototype.zoomTween = function(front) {
      var sc, zoom_tween_end, zoom_tween_start;
      if (front == null) {
        front = true;
      }
      sc = front ? 1.5 : 0.5;
      zoom_tween_start = new TWEEN.Tween(this.tween_data).to({
        s: sc,
        z: sc - 1
      }, this.swap_length / 2).easing(TWEEN.Easing.Circular.Out).onUpdate(this.tweenTick);
      zoom_tween_end = new TWEEN.Tween(this.tween_data).to({
        s: 1,
        z: 0
      }, this.swap_length / 2).easing(TWEEN.Easing.Circular.In).onUpdate(this.tweenTick);
      return zoom_tween_start.chain(zoom_tween_end);
    };

    Gem.prototype.realSwapTween = function(x, y) {
      return new TWEEN.Tween(this.tween_data).to({
        x: x,
        y: y
      }, this.swap_length).easing(TWEEN.Easing.Back.InOut).onUpdate(this.tweenTick).onStart(this.swapStart).onComplete(this.animationComplete);
    };

    Gem.prototype.failedSwapTween = function(x, y) {
      var swap_end, swap_start;
      swap_start = new TWEEN.Tween(this.tween_data).to({
        x: x,
        y: y
      }, this.swap_length / 1.5).easing(TWEEN.Easing.Back.In).onStart(this.swapStart).onUpdate(this.tweenTick);
      swap_end = new TWEEN.Tween(this.tween_data).to({
        x: this.object.position.x,
        y: this.object.position.y
      }, this.swap_length / 1.5).easing(TWEEN.Easing.Quadratic.InOut).onStart(this.swapStart).onUpdate(this.tweenTick).onComplete(this.animationComplete);
      return swap_start.chain(swap_end);
    };

    Gem.prototype.failedZoomTween = function(front) {
      var a, b, c, d, sc;
      if (front == null) {
        front = true;
      }
      sc = front ? 1.5 : 0.5;
      a = new TWEEN.Tween(this.tween_data).to({
        s: sc,
        z: sc - 1
      }, this.swap_length / 3).easing(TWEEN.Easing.Circular.Out).onUpdate(this.tweenTick);
      b = new TWEEN.Tween(this.tween_data).to({
        s: 1,
        z: 0
      }, this.swap_length / 3).easing(TWEEN.Easing.Circular.In).onUpdate(this.tweenTick);
      c = new TWEEN.Tween(this.tween_data).to({
        s: 2 - sc,
        z: 1 - sc
      }, this.swap_length / 3).easing(TWEEN.Easing.Circular.In).onUpdate(this.tweenTick);
      d = new TWEEN.Tween(this.tween_data).to({
        s: 1,
        z: 0
      }, this.swap_length / 3).easing(TWEEN.Easing.Circular.Out).onUpdate(this.tweenTick);
      c.chain(d);
      b.chain(c);
      return a.chain(b);
    };

    Gem.prototype.tweenTick = function() {
      this.object.position.x = this.tween_data.x;
      this.object.position.y = this.tween_data.y;
      this.object.position.z = this.tween_data.z;
      this.object.scale.x = this.tween_data.s;
      return this.object.scale.y = this.tween_data.s;
    };

    Gem.prototype.highlite = function(t) {
      this.object.rotation.z = Math.PI * 2 - t / 400 % Math.PI * 2;
      this.object.scale.x = 1.25;
      return this.object.scale.y = 1.25;
    };

    Gem.prototype.reset = function() {
      this.object.rotation.z = 0;
      this.object.scale.x = 1;
      return this.object.scale.y = 1;
    };

    return Gem;

  })();

  GemFactory = (function() {
    function GemFactory() {
      this.gemsLoaded = bind(this.gemsLoaded, this);
      this.loaded = false;
      this.jsonloader = new THREE.JSONLoader();
      this.scalefactor = 1.125;
      this.outline = new THREE.MeshBasicMaterial({
        color: 'black',
        side: THREE.BackSide
      });
      this.gemid = 0;
      this.loadGems();
    }

    GemFactory.prototype.loadGems = function() {
      this.req = new XMLHttpRequest();
      this.req.onload = this.gemsLoaded;
      this.req.open("GET", 'models/gems.json');
      return this.req.send();
    };

    GemFactory.prototype.gemsLoaded = function() {
      var chunk, gem, i, json;
      json = JSON.parse(this.req.responseText);
      chunk = this.buildGeometry(json.chunk.geometry, this.scalefactor / 2);
      this.defs = (function() {
        var j, len, ref, results;
        ref = json.gems;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          gem = ref[i];
          results.push({
            id: i,
            geometry: this.buildGeometry(gem.geometry, this.scalefactor),
            material: this.buildMaterial(gem.color),
            outline: this.outline,
            chunk: chunk
          });
        }
        return results;
      }).call(this);
      this.loaded = true;
      return this.onload();
    };

    GemFactory.prototype.buildGeometry = function(def, scale) {
      var geom, r, rx, s;
      geom = this.jsonloader.parse(def).geometry;
      rx = new THREE.Matrix4().makeRotationX(Math.PI / 2);
      s = new THREE.Matrix4().makeScale(scale, scale, scale);
      r = new THREE.Matrix4().multiplyMatrices(rx, s);
      geom.applyMatrix(r);
      return new THREE.BufferGeometry().fromGeometry(geom);
    };

    GemFactory.prototype.buildMaterial = function(color) {
      return new THREE.MeshPhongMaterial({
        color: color,
        ambient: color,
        shininess: 60
      });
    };

    GemFactory.prototype.buildGem = function(def) {
      return new Gem(def, this.gemid++);
    };

    GemFactory.prototype.random = function() {
      return this.buildGem(this.defs[Math.floor(Math.random() * this.defs.length)]);
    };

    GemFactory.prototype.onload = function() {};

    return GemFactory;

  })();

  Grid = (function() {
    function Grid(w, h) {
      this.w = w;
      this.h = h;
      this.margin = 0;
      this.footer = 1;
      this.cells = this.buildCells();
      this.object = new THREE.Object3D();
      this.ready_for_input = true;
      this.board = this.buildBoard();
      this.object.add(this.board);
      this.object.position.x = this.boardScale(this.margin);
      this.object.position.y = this.boardScale(this.margin + this.footer);
      this.object.scale.multiplyScalar(this.boardScale());
    }

    Grid.prototype.flatCells = function() {
      return Array.prototype.concat.apply([], this.cells);
    };

    Grid.prototype.doomedCells = function() {
      var cell, j, len, ref, ref1, ref2, results;
      ref = this.flatCells();
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        cell = ref[j];
        if (((ref1 = cell.gem) != null ? ref1.doomed : void 0) && ((ref2 = cell.gem) != null ? ref2.exploding : void 0) !== true) {
          results.push(cell);
        }
      }
      return results;
    };

    Grid.prototype.emptyCells = function() {
      var cell, j, len, ref, results;
      ref = this.flatCells();
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        cell = ref[j];
        if (cell.gem === null) {
          results.push(cell);
        }
      }
      return results;
    };

    Grid.prototype.dirtyCells = function() {
      var cell, j, len, ref, results;
      ref = this.flatCells();
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        cell = ref[j];
        if (cell.dirty) {
          results.push(cell);
        }
      }
      return results;
    };

    Grid.prototype.animating = function() {
      var cell, j, len, ref, ref1;
      ref = this.flatCells();
      for (j = 0, len = ref.length; j < len; j++) {
        cell = ref[j];
        if ((ref1 = cell.gem) != null ? ref1.animating : void 0) {
          return true;
        }
      }
      return false;
    };

    Grid.prototype.clearDoomed = function() {
      var cell, i, j, len, ref, results;
      ref = this.doomedCells();
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        cell = ref[i];
        cell.gem.explode(i * 50);
        results.push(cell.gem = null);
      }
      return results;
    };

    Grid.prototype.checkDirty = function() {
      var cell, j, len, ref, results;
      ref = this.dirtyCells();
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        cell = ref[j];
        results.push(cell.flagCleared());
      }
      return results;
    };

    Grid.prototype.fillHoles = function() {
      var cell, j, len, ref, results;
      ref = this.emptyCells();
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        cell = ref[j];
        results.push(this.fillCell(cell));
      }
      return results;
    };

    Grid.prototype.fillCell = function(cell) {
      var j, new_cell, ref, ref1, results, y;
      cell.dirty = true;
      results = [];
      for (y = j = ref = cell.y + 1, ref1 = this.h; ref <= ref1 ? j <= ref1 : j >= ref1; y = ref <= ref1 ? ++j : --j) {
        if (y === this.h) {
          cell.gem = GEMGAME.gem_factory.random();
          cell.gem.setX(cell.xPos());
          cell.gem.setY(this.h * 2);
          this.object.add(cell.gem.object);
          results.push(cell.gem.dropTo(cell.yPos(), 0, 0, 500));
        } else {
          new_cell = this.cells[cell.x][y];
          if (new_cell.gem) {
            cell.gem = new_cell.gem;
            new_cell.gem = null;
            cell.gem.dropTo(cell.yPos(), 0, 0, 500);
            this.fillCell(new_cell);
            break;
          } else {
            results.push(void 0);
          }
        }
      }
      return results;
    };

    Grid.prototype.update = function(t) {
      var current, ref;
      if (this.animating()) {
        return;
      }
      this.clearDoomed();
      while (this.emptyCells().length > 0) {
        this.fillHoles();
      }
      if (this.dirtyCells().length > 0) {
        this.checkDirty();
      } else {
        GEMGAME.score.chain = 0;
      }
      if (this.ready_for_input && GEMGAME.input.touching) {
        this.selected = this.touchedCell(GEMGAME.input.start);
        current = this.touchedCell(GEMGAME.input.move);
        if (!this.validMove(this.selected, current)) {
          return this.stopInput();
        }
        if (this.selected === current) {
          if ((ref = this.selected) != null) {
            ref.highlite(t);
          }
        } else {
          this.stopInput();
          this.selected.swapGems(current);
        }
      }
      if (!GEMGAME.input.touching && !this.animating()) {
        if (this.selected) {
          this.selected.reset();
          this.selected = null;
        }
        return this.ready_for_input = true;
      }
    };

    Grid.prototype.validMove = function(cell1, cell2) {
      return cell1 && cell1.gem && cell2 && cell2.gem && (Math.abs(cell1.x - cell2.x) + Math.abs(cell1.y - cell2.y)) <= 1;
    };

    Grid.prototype.stopInput = function() {
      var ref;
      this.ready_for_input = false;
      return (ref = this.selected) != null ? ref.reset() : void 0;
    };

    Grid.prototype.topOffset = function() {
      return GEMGAME.realHeight() - this.boardScale(this.h + this.margin + this.footer);
    };

    Grid.prototype.touchedCell = function(pos) {
      var ref, x, y;
      x = Math.floor(pos.x / this.boardScale() - this.margin);
      y = this.h - 1 - Math.floor((pos.y - this.topOffset()) / this.boardScale());
      return (ref = this.cells[x]) != null ? ref[y] : void 0;
    };

    Grid.prototype.boardScale = function(i) {
      if (i == null) {
        i = 1;
      }
      return GEMGAME.realWidth() / this.w * i;
    };

    Grid.prototype.addGems = function() {
      var cell, j, len, ref, results, row;
      ref = this.cells;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        row = ref[j];
        results.push((function() {
          var k, len1, results1;
          results1 = [];
          for (k = 0, len1 = row.length; k < len1; k++) {
            cell = row[k];
            while (true) {
              cell.gem = GEMGAME.gem_factory.random();
              if (!cell.willClear()) {
                break;
              }
            }
            cell.gem.setX(cell.xPos());
            cell.gem.setY(this.h * 2);
            this.object.add(cell.gem.object);
            results1.push(cell.gem.dropTo(cell.yPos(), 1000 + cell.yPos() * 50 + cell.xPos() * 10, -cell.yPos()));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Grid.prototype.buildBoard = function() {
      var board, cell, j, len, ref;
      board = new THREE.Object3D();
      board.position.z = -20 * this.h;
      ref = this.flatCells();
      for (j = 0, len = ref.length; j < len; j++) {
        cell = ref[j];
        board.add(cell.square);
      }
      return board;
    };

    Grid.prototype.buildCells = function() {
      var j, ref, results, x, y;
      results = [];
      for (x = j = 0, ref = this.h; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        results.push((function() {
          var k, ref1, results1;
          results1 = [];
          for (y = k = 0, ref1 = this.w; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
            results1.push(new Cell(x, y));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Grid.prototype.show = function() {
      var cell, j, len, ref, results;
      ref = this.flatCells();
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        cell = ref[j];
        results.push(cell.show());
      }
      return results;
    };

    return Grid;

  })();

  window.GEMGAME = null;

  document.addEventListener('deviceready', function() {
    window.GEMGAME = new Main();
    return window.GEMGAME.init();
  });

  Input = (function(superClass) {
    extend(Input, superClass);

    function Input() {
      this.updateOrientation = bind(this.updateOrientation, this);
      this.touchMove = bind(this.touchMove, this);
      this.touchEnd = bind(this.touchEnd, this);
      this.touchStart = bind(this.touchStart, this);
      this.touching = false;
      this.bindEvents();
      this.start = {
        x: null,
        y: null
      };
      this.move = {
        x: null,
        y: null
      };
      this.orientation = {
        alpha: 0,
        beta: 0,
        gamma: 0
      };
      Input.__super__.constructor.apply(this, arguments);
    }

    Input.prototype.bindEvents = function() {
      window.addEventListener('touchstart', this.touchStart);
      window.addEventListener('touchend', this.touchEnd);
      window.addEventListener('touchmove', this.touchMove);
      return window.addEventListener('deviceorientation', this.updateOrientation);
    };

    Input.prototype.touchStart = function(e) {
      this.touching = true;
      this.start.x = e.touches[0].screenX * window.devicePixelRatio;
      this.start.y = e.touches[0].screenY * window.devicePixelRatio;
      return this.move = {
        x: this.start.x,
        y: this.start.y
      };
    };

    Input.prototype.touchEnd = function(e) {
      return this.touching = false;
    };

    Input.prototype.touchMove = function(e) {
      this.move.x = e.touches[0].screenX * window.devicePixelRatio;
      return this.move.y = e.touches[0].screenY * window.devicePixelRatio;
    };

    Input.prototype.updateOrientation = function(orientation) {
      this.orientation.alpha = orientation.alpha || 0;
      this.orientation.gamma = orientation.gamma || 0;
      return this.orientation.beta = orientation.beta || 0;
    };

    return Input;

  })(THREE.EventDispatcher);

  Logger = (function() {
    function Logger(enabled) {
      if (enabled == null) {
        enabled = true;
      }
      this.enabled = enabled;
      this.loglines = [];
    }

    Logger.prototype.log = function(text) {
      if (!this.enabled) {
        return;
      }
      this.loglines.push(text);
      return document.getElementById('log').innerText = this.loglines.join("\n");
    };

    return Logger;

  })();

  Main = (function() {
    function Main() {
      this.renderLoop = bind(this.renderLoop, this);
      this.gemsLoaded = bind(this.gemsLoaded, this);
      this.grid_width = 8;
      this.grid_height = 8;
    }

    Main.prototype.init = function() {
      this.initThree();
      this.input = new Input();
      this.score = new Score();
      this.gem_factory = new GemFactory();
      this.audio = new AudioManager(['sounds/woosh.mp3', 'sounds/pop.mp3']);
      this.fps = new Fps();
      this.roaming_light = new RoamingLight(GEMGAME.realWidth());
      this.grid = new Grid(this.grid_width, this.grid_height, this);
      this.menu = new Menu();
      this.background = new Background();
      this.scene.add(this.menu.object);
      this.scene.add(this.roaming_light.object);
      this.scene.add(this.background.object);
      this.scene.add(this.grid.object);
      GEMGAME.gem_factory.onload = this.gemsLoaded;
      return this.renderLoop(0);
    };

    Main.prototype.realWidth = function() {
      return window.innerWidth * window.devicePixelRatio;
    };

    Main.prototype.realHeight = function() {
      return window.innerHeight * window.devicePixelRatio;
    };

    Main.prototype.aspect = function() {
      return window.innerWidth / window.innerHeight;
    };

    Main.prototype.initThree = function() {
      document.body.style.zoom = 1 / window.devicePixelRatio;
      this.scene = new THREE.Scene();
      this.camera = new THREE.OrthographicCamera(0, GEMGAME.realWidth(), GEMGAME.realHeight(), 0, 0, 200000);
      this.camera.position.z = 500;
      this.camera.updateProjectionMatrix();
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(GEMGAME.realWidth(), GEMGAME.realHeight());
      document.body.appendChild(this.renderer.domElement);
      return this.scene.add(new THREE.AmbientLight(0x666666));
    };

    Main.prototype.gemsLoaded = function() {
      return this.menu.open('main');
    };

    Main.prototype.renderLoop = function(t) {
      requestAnimationFrame(this.renderLoop);
      TWEEN.update(t);
      GEMGAME.score.update(t);
      this.roaming_light.update(t);
      this.grid.update(t);
      this.menu.update(t);
      this.renderer.render(this.scene, this.camera);
      return this.fps.update(t);
    };

    Main.prototype.start = function() {
      this.grid.show();
      return this.grid.addGems();
    };

    return Main;

  })();

  Menu = (function() {
    function Menu() {
      this.tweenTick = bind(this.tweenTick, this);
      this.chooseComplete = bind(this.chooseComplete, this);
      this.object = new THREE.Object3D();
      this.fontcfg = {
        size: this.fontSize(),
        height: 10,
        curveSegments: 3,
        font: "droid sans",
        weight: "normal",
        style: "normal",
        bevelThickness: 10,
        bevelSize: 5,
        bevelEnabled: true,
        extrudeMaterial: 1
      };
      this.menu = {
        main: [
          {
            label: 'New Game',
            color: 'green',
            exec: function() {
              return GEMGAME.start();
            }
          }, {
            label: 'Config',
            color: 'yellow'
          }, {
            label: 'About',
            color: 'teal'
          }, {
            label: 'Quit',
            color: 'red',
            exec: navigator.app.exitApp
          }
        ]
      };
      this.outline = new THREE.MeshBasicMaterial({
        color: 'black',
        side: THREE.BackSide
      });
      this.meshes = [];
    }

    Menu.prototype.fontSize = function() {
      return GEMGAME.realWidth() / 12;
    };

    Menu.prototype.center = function(width) {
      return GEMGAME.realWidth() / 2 - width / 2;
    };

    Menu.prototype.open = function(menu) {
      var i, item, j, len, ref, results;
      this.current = this.menu[menu];
      ref = this.current;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        item = ref[i];
        results.push(this.createItem(item, i));
      }
      return results;
    };

    Menu.prototype.createItem = function(item, i) {
      var j, len, letter, letters, mat;
      mat = new THREE.MeshPhongMaterial({
        color: item.color,
        ambient: item.color,
        shininess: 60
      });
      item.object = new THREE.Object3D();
      letters = (function() {
        var j, len, ref, results;
        ref = item.label.split('');
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          letter = ref[j];
          results.push(this.createLetter(letter, mat));
        }
        return results;
      }).call(this);
      item.width = 0;
      for (j = 0, len = letters.length; j < len; j++) {
        letter = letters[j];
        if (letter) {
          letter.position.x = item.width;
          item.object.add(letter);
          item.width += (letter.children[0].geometry.boundingBox.max.x - letter.children[0].geometry.boundingBox.min.x) + this.fontSize() / 8;
        } else {
          item.width += this.fontSize() / 8;
        }
      }
      item.object.position.x = this.center(item.width);
      item.object.position.y = i * this.fontSize() * -2 + GEMGAME.realHeight() / 2 + this.current.length * this.fontSize() / 2;
      return this.object.add(item.object);
    };

    Menu.prototype.createLetter = function(letter, mat) {
      var geom, h, hd, mesh, object, os, outline_mesh, w, wd;
      if (letter === ' ') {
        return;
      }
      os = 1.15;
      object = new THREE.Object3D();
      geom = new THREE.TextGeometry(letter, this.fontcfg);
      geom.computeBoundingBox();
      w = geom.boundingBox.max.x - geom.boundingBox.min.x;
      h = geom.boundingBox.max.y - geom.boundingBox.min.y;
      wd = w * os - w;
      hd = h * os - h;
      mesh = new THREE.Mesh(geom, mat);
      mesh.position.x = wd / 2;
      mesh.position.y = hd / 2;
      mesh.position.z = 2;
      outline_mesh = new THREE.Mesh(geom, this.outline);
      outline_mesh.position.z = -2;
      outline_mesh.scale.multiplyScalar(os);
      outline_mesh.geometry.computeBoundingBox();
      object.add(mesh);
      object.add(outline_mesh);
      return object;
    };

    Menu.prototype.choose = function(index) {
      this.chosen = index;
      return this.choseAnimation();
    };

    Menu.prototype.chooseComplete = function() {
      var base;
      if (typeof (base = this.current[this.chosen]).exec === "function") {
        base.exec();
      }
      this.chosen = null;
      return this.current = null;
    };

    Menu.prototype.choseAnimation = function() {
      var chosen_to, chosen_tween, close_to, close_tween, i, item, j, len, ref;
      this.tween_data = {};
      close_to = {};
      chosen_to = {};
      ref = this.current;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        item = ref[i];
        this.tween_data[i] = 1;
        if (i !== this.chosen) {
          close_to[i] = 0;
        } else {
          chosen_to[i] = 0;
        }
      }
      close_tween = new TWEEN.Tween(this.tween_data).to(close_to, 500).easing(TWEEN.Easing.Linear.None).onUpdate(this.tweenTick);
      close_tween.start();
      chosen_tween = new TWEEN.Tween(this.tween_data).to(chosen_to, 1000).easing(TWEEN.Easing.Back.In).onUpdate(this.tweenTick).onComplete(this.chooseComplete);
      return chosen_tween.start();
    };

    Menu.prototype.tweenTick = function() {
      var i, ref, results, s;
      ref = this.tween_data;
      results = [];
      for (i in ref) {
        s = ref[i];
        if (s === 0) {
          results.push(this.object.remove(this.current[i].object));
        } else {
          this.current[i].object.scale.x = s;
          this.current[i].object.scale.y = s;
          results.push(this.current[i].object.position.x = this.center(this.current[i].width * s));
        }
      }
      return results;
    };

    Menu.prototype.update = function(t) {
      var i, ty;
      if (GEMGAME.input.touching) {
        ty = GEMGAME.realHeight() - GEMGAME.input.start.y;
        i = this.checkTouch(ty);
        if (i !== false) {
          return this.choose(i);
        }
      }
    };

    Menu.prototype.checkTouch = function(ty) {
      var i, item, j, len, ref;
      if (this.current === null) {
        return false;
      }
      if (ty > this.fontSize() + this.current[0].object.position.y) {
        return false;
      }
      ref = this.current;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        item = ref[i];
        if (ty > item.object.position.y) {
          return i;
        }
      }
      return false;
    };

    return Menu;

  })();

  RoamingLight = (function() {
    function RoamingLight(scale) {
      this.scale = scale;
      this.object = new THREE.DirectionalLight(0xffffff, 1);
      this.object.position.z = scale / 2;
      this.speed = 2500;
    }

    RoamingLight.prototype.xPos = function(t) {
      return Math.sin(t / this.speed) * this.scale;
    };

    RoamingLight.prototype.yPos = function(t) {
      return Math.cos(t / (this.speed * 2)) * this.scale;
    };

    RoamingLight.prototype.xOffset = function() {
      return GEMGAME.input.orientation.gamma * (Math.PI / 180) * -1 * this.scale;
    };

    RoamingLight.prototype.yOffset = function() {
      return GEMGAME.input.orientation.beta * (Math.PI / 180) * this.scale;
    };

    RoamingLight.prototype.update = function(t) {
      this.object.position.x = this.xPos(t) + this.xOffset();
      return this.object.position.y = this.yPos(t) + this.yOffset();
    };

    return RoamingLight;

  })();

  Score = (function() {
    function Score() {
      this.score = 0;
      this.cleared = 0;
      this.chain = 0;
      this.longest_chain = 0;
      this.last_updated = 0;
      this.update_interval = 1000;
    }

    Score.prototype.worth = function(cleared) {
      return (cleared - 2) * cleared * (this.chain + 1);
    };

    Score.prototype.updateChain = function() {
      this.chain += 1;
      return this.longest_chain = this.chain > this.longest_chain ? this.chain : this.longest_chain;
    };

    Score.prototype.add = function(cleared) {
      this.score += this.worth(cleared);
      this.cleared += cleared;
      return this.updateChain();
    };

    Score.prototype.timeToUpdate = function(t) {
      return t - this.last_updated > this.update_interval;
    };

    Score.prototype.scoreText = function() {
      return "Cleared: " + this.cleared + "\nChain: " + this.chain + "\nLongest Chain: " + this.longest_chain + "\nScore: " + this.score;
    };

    Score.prototype.update = function(t) {
      if (!this.timeToUpdate(t)) {
        return;
      }
      return document.getElementById('score').innerText = this.scoreText();
    };

    return Score;

  })();

  Timer = (function() {
    function Timer(length, scale, w) {
      this.started = false;
      this.scale = scale;
      this.length = length;
      this.warning_seconds = 15;
      this.danger_seconds = 5;
      this.w = w;
      this.buildObject();
    }

    Timer.prototype.buildObject = function() {
      var geometry, material;
      this.object = new THREE.Object3D();
      this.object.scale.x = this.scale;
      this.object.scale.y = this.scale;
      this.object.scale.z = this.scale;
      this.object.position.x = this.w / 2 * this.scale;
      this.object.position.y = 0.5 * this.scale;
      this.object.rotation.z = Math.PI / 2;
      geometry = new THREE.CylinderGeometry(0.25, 0.25, this.w - 0.5, 4);
      material = new THREE.MeshPhongMaterial({
        color: 'teal',
        ambient: 'teal',
        shininess: 60
      });
      return this.cylinder = new THREE.Mesh(geometry, material);
    };

    Timer.prototype.start = function() {
      return this.started = true;
    };

    Timer.prototype.update = function(t) {
      var elapsed, perc, remaining;
      if (!this.started) {
        return;
      }
      if (this.start_time == null) {
        this.start_time = t;
      }
      elapsed = (t - this.start_time) / 1000;
      remaining = this.length - elapsed;
      if (remaining < this.danger_seconds) {
        this.cylinder.material.color.setStyle("red");
        this.cylinder.material.ambient.setStyle("red");
      } else if (remaining < this.warning_seconds) {
        this.cylinder.material.color.setStyle("yellow");
        this.cylinder.material.ambient.setStyle("yellow");
      }
      if (remaining >= 0) {
        perc = remaining / this.length;
        this.cylinder.scale.y = perc;
        return this.cylinder.position.y = (this.w - 0.5) / 2 * (1 - perc);
      }
    };

    return Timer;

  })();

}).call(this);
