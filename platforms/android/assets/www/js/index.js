// Generated by CoffeeScript 1.9.1
(function() {
  var Fps, Jewel, JewelClone, Jewels, Logger,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Fps = (function() {
    function Fps() {
      this.refresh = 1000;
      this.frames = 0;
      this.lasttime = 0;
      this.createDiv();
    }

    Fps.prototype.createDiv = function() {
      var div;
      div = document.createElement("div");
      div.id = 'fps';
      return document.getElementsByTagName('body')[0].appendChild(div);
    };

    Fps.prototype.timeDiff = function(t) {
      return t - this.lasttime;
    };

    Fps.prototype.update = function(t) {
      var fps;
      this.frames++;
      if (this.timeDiff(t) > this.refresh) {
        fps = Math.floor(this.frames / (this.timeDiff(t) / 100000)) / 100;
        document.getElementById('fps').innerText = "fps: " + fps;
        this.frames = 0;
        return this.lasttime = t;
      }
    };

    return Fps;

  })();

  document.addEventListener('deviceready', function() {
    return new JewelClone();
  });

  JewelClone = (function() {
    function JewelClone() {
      this.renderLoop = bind(this.renderLoop, this);
      this.jewelsLoaded = bind(this.jewelsLoaded, this);
      this.updateOrientation = bind(this.updateOrientation, this);
      this.logger = new Logger();
      this.logger.log("logger started");
      this.fps = new Fps();
      this.registerEvents();
      this.logger.log('init three');
      this.initThree();
      this.jewels = new Jewels();
      this.jewels.onload = this.jewelsLoaded;
    }

    JewelClone.prototype.registerEvents = function() {
      return window.addEventListener('deviceorientation', this.updateOrientation);
    };

    JewelClone.prototype.realWidth = function() {
      return window.innerWidth * window.devicePixelRatio;
    };

    JewelClone.prototype.realHeight = function() {
      return window.innerHeight * window.devicePixelRatio;
    };

    JewelClone.prototype.aspect = function() {
      return window.innerWidth / window.innerHeight;
    };

    JewelClone.prototype.updateOrientation = function(orientation) {
      this.deviceAlpha = orientation.alpha;
      this.deviceGamma = orientation.gamma;
      return this.deviceBeta = orientation.beta;
    };

    JewelClone.prototype.initThree = function() {
      var light;
      document.body.style.zoom = 1 / window.devicePixelRatio;
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(75, this.aspect(), 0.1, 1000);
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(this.realWidth(), this.realHeight());
      document.body.appendChild(this.renderer.domElement);
      this.deviceAlpha = null;
      this.deviceGamma = null;
      this.deviceBeta = null;
      this.betaAxis = 'x';
      this.gammaAxis = 'y';
      this.betaAxisInversion = -1;
      this.gammaAxisInversion = -1;
      this.scene.add(new THREE.AmbientLight(0x555555));
      light = new THREE.DirectionalLight(0xffffff, 1);
      light.position.z = 3;
      light.position.y = 1;
      this.scene.add(light);
      return this.camera.position.z = 3;
    };

    JewelClone.prototype.jewelsLoaded = function() {
      console.log('lets go');
      this.scene.add(this.jewels.objects[0].mesh);
      return this.renderLoop(0);
    };

    JewelClone.prototype.renderLoop = function(t) {
      requestAnimationFrame(this.renderLoop);
      this.fps.update(t);
      return this.renderer.render(this.scene, this.camera);
    };

    return JewelClone;

  })();

  Jewel = (function() {
    function Jewel(id) {
      this.modelLoaded = bind(this.modelLoaded, this);
      this.loaded = false;
      this.id = id;
      this.material = new THREE.MeshLambertMaterial({
        color: 'blue',
        ambient: 'blue'
      });
      this.loadModel();
    }

    Jewel.prototype.modelUrl = function() {
      return "models/" + this.id + ".json";
    };

    Jewel.prototype.modelLoaded = function() {
      var geometry, json, jsonloader;
      jsonloader = new THREE.JSONLoader();
      json = JSON.parse(this.req.responseText);
      geometry = jsonloader.parse(json.geometries[0].data).geometry;
      this.geometry = new THREE.BufferGeometry().fromGeometry(geometry);
      this.mesh = new THREE.Mesh(this.geometry, this.material);
      this.loaded = true;
      return this.onload();
    };

    Jewel.prototype.loadModel = function() {
      this.req = new XMLHttpRequest();
      this.req.onload = this.modelLoaded;
      this.req.open("GET", this.modelUrl());
      return this.req.send();
    };

    Jewel.prototype.onload = function() {};

    return Jewel;

  })();

  Jewels = (function() {
    function Jewels() {
      this.jewelLoaded = bind(this.jewelLoaded, this);
      var i, jewel, len, ref;
      this.loaded = false;
      this.list = ['archaic2', 'asterism', 'button', 'litehouse', 'novice3', 'novice6', 'starcut', 'arrow', 'bestilltru', 'cascade', 'novice1', 'novice5', 'novice8'];
      this.objects = this.load();
      ref = this.objects;
      for (i = 0, len = ref.length; i < len; i++) {
        jewel = ref[i];
        jewel.onload = this.jewelLoaded;
      }
    }

    Jewels.prototype.load = function() {
      var i, id, len, ref, results;
      ref = this.list;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        id = ref[i];
        results.push(new Jewel(id));
      }
      return results;
    };

    Jewels.prototype.allLoaded = function() {
      var i, jewel, len, ref;
      ref = this.objects;
      for (i = 0, len = ref.length; i < len; i++) {
        jewel = ref[i];
        if (!jewel.loaded) {
          return false;
        }
      }
      return true;
    };

    Jewels.prototype.jewelLoaded = function() {
      if (this.allLoaded()) {
        return this.onload();
      }
    };

    Jewels.prototype.onload = function() {};

    return Jewels;

  })();

  Logger = (function() {
    function Logger() {
      this.loglines = [];
      this.createDiv();
    }

    Logger.prototype.createDiv = function() {
      var div;
      div = document.createElement("div");
      div.id = 'log';
      return document.getElementsByTagName('body')[0].appendChild(div);
    };

    Logger.prototype.log = function(text) {
      this.loglines.push(text);
      return document.getElementById('log').innerText = this.loglines.join("\n");
    };

    return Logger;

  })();

}).call(this);
