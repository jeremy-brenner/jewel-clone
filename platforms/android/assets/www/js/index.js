// Generated by CoffeeScript 1.9.1
(function() {
  var Cell, Fps, Grid, Input, JewelClone, Jewels, Logger,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Grid = (function() {
    function Grid(w, h, jewels) {
      var cell, i, k, len, len1, ref, row;
      this.w = w;
      this.h = h;
      this.jewels = jewels;
      this.cells = this.buildCells();
      this.object = new THREE.Object3D();
      ref = this.cells;
      for (i = 0, len = ref.length; i < len; i++) {
        row = ref[i];
        for (k = 0, len1 = row.length; k < len1; k++) {
          cell = row[k];
          this.object.add(cell.jewel);
        }
      }
    }

    Grid.prototype.buildCells = function() {
      var i, ref, results, x, y;
      results = [];
      for (x = i = 0, ref = this.h; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
        results.push((function() {
          var k, ref1, results1;
          results1 = [];
          for (y = k = 0, ref1 = this.w; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
            results1.push(new Cell(x, y, this.jewels.random()));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return Grid;

  })();

  Cell = (function() {
    function Cell(x, y, jewel) {
      this.x = x;
      this.y = y;
      this.jewel = jewel;
      this.jewel.position.x = x + 0.5;
      this.jewel.position.y = y + 0.5;
    }

    return Cell;

  })();

  Fps = (function() {
    function Fps() {
      this.refresh = 1000;
      this.frames = 0;
      this.lasttime = 0;
    }

    Fps.prototype.timeDiff = function(t) {
      return t - this.lasttime;
    };

    Fps.prototype.update = function(t) {
      var fps;
      this.frames++;
      if (this.timeDiff(t) > this.refresh) {
        fps = Math.floor(this.frames / (this.timeDiff(t) / 100000)) / 100;
        document.getElementById('fps').innerText = "fps: " + fps;
        this.frames = 0;
        return this.lasttime = t;
      }
    };

    return Fps;

  })();

  document.addEventListener('deviceready', function() {
    return new JewelClone();
  });

  Input = (function() {
    function Input() {
      this.updateOrientation = bind(this.updateOrientation, this);
      this.touchMove = bind(this.touchMove, this);
      this.touchEnd = bind(this.touchEnd, this);
      this.touchStart = bind(this.touchStart, this);
      this.touching = false;
      this.bindEvents();
      this.start = {
        x: null,
        y: null
      };
      this.move = {
        x: null,
        y: null
      };
      this.orientation = {
        alpha: 0,
        beta: 0,
        gamma: 0
      };
    }

    Input.prototype.bindEvents = function() {
      window.addEventListener('touchstart', this.touchStart);
      window.addEventListener('touchend', this.touchEnd);
      window.addEventListener('touchmove', this.touchMove);
      return window.addEventListener('deviceorientation', this.updateOrientation);
    };

    Input.prototype.debug = function() {
      return document.getElementById('input').innerText = "touching: " + (this.touching.toString()) + "\nstart: " + this.start.x + ", " + this.start.y + "\nmove: " + this.move.x + ", " + this.move.y + "\nalpha: " + this.orientation.alpha + "\nbeta: " + this.orientation.beta + "\ngamma: " + this.orientation.gamma;
    };

    Input.prototype.touchStart = function(e) {
      this.touching = true;
      this.start.x = e.touches[0].screenX * window.devicePixelRatio;
      this.start.y = e.touches[0].screenY * window.devicePixelRatio;
      return this.debug();
    };

    Input.prototype.touchEnd = function(e) {
      this.touching = false;
      return this.debug();
    };

    Input.prototype.touchMove = function(e) {
      this.move.x = e.touches[0].screenX * window.devicePixelRatio;
      this.move.y = e.touches[0].screenY * window.devicePixelRatio;
      return this.debug();
    };

    Input.prototype.updateOrientation = function(orientation) {
      this.orientation.alpha = orientation.alpha || 0;
      this.orientation.gamma = orientation.gamma || 0;
      this.orientation.beta = orientation.beta || 0;
      return this.debug();
    };

    return Input;

  })();

  JewelClone = (function() {
    function JewelClone() {
      this.renderLoop = bind(this.renderLoop, this);
      this.jewelsLoaded = bind(this.jewelsLoaded, this);
      this.logger = new Logger();
      this.logger.log("logger started");
      this.fps = new Fps();
      this.input = new Input();
      this.deviceAlpha = 0;
      this.deviceBeta = 0;
      this.deviceGamma = 0;
      this.logger.log('init three');
      this.initThree();
      this.jewels = new Jewels();
      this.jewels.onload = this.jewelsLoaded;
    }

    JewelClone.prototype.realWidth = function() {
      return window.innerWidth * window.devicePixelRatio;
    };

    JewelClone.prototype.realHeight = function() {
      return window.innerHeight * window.devicePixelRatio;
    };

    JewelClone.prototype.aspect = function() {
      return window.innerWidth / window.innerHeight;
    };

    JewelClone.prototype.initThree = function() {
      document.body.style.zoom = 1 / window.devicePixelRatio;
      this.scene = new THREE.Scene();
      this.camera = new THREE.OrthographicCamera(0, this.realWidth(), this.realHeight(), 0, 0, 1000);
      this.camera.position.z = 500;
      this.camera.updateProjectionMatrix();
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(this.realWidth(), this.realHeight());
      document.body.appendChild(this.renderer.domElement);
      this.scene.add(new THREE.AmbientLight(0x333333));
      this.light = new THREE.DirectionalLight(0xffffff, 1);
      this.light.position.z = 100;
      this.light.position.x = 30;
      this.light.position.y = 30;
      return this.scene.add(this.light);
    };

    JewelClone.prototype.jewelsLoaded = function() {
      var d, s;
      this.logger.log("jewels loaded");
      d = 8;
      s = this.realWidth() / d;
      this.board = new Grid(d, d, this.jewels);
      this.board.object.scale.multiplyScalar(s);
      this.scene.add(this.board.object);
      return this.renderLoop(0);
    };

    JewelClone.prototype.updateLight = function() {
      this.light.position.x = (this.input.orientation.gamma * -1) + 30;
      return this.light.position.y = this.input.orientation.beta + 30;
    };

    JewelClone.prototype.renderLoop = function(t) {
      requestAnimationFrame(this.renderLoop);
      this.fps.update(t);
      this.updateLight();
      return this.renderer.render(this.scene, this.camera);
    };

    return JewelClone;

  })();

  Jewels = (function() {
    function Jewels() {
      this.jewelsLoaded = bind(this.jewelsLoaded, this);
      this.loaded = false;
      this.jsonloader = new THREE.JSONLoader();
      this.scalefactor = 1.25;
      this.loadJewels();
    }

    Jewels.prototype.loadJewels = function() {
      this.req = new XMLHttpRequest();
      this.req.onload = this.jewelsLoaded;
      this.req.open("GET", 'models/jewels.json');
      return this.req.send();
    };

    Jewels.prototype.jewelsLoaded = function() {
      var jewel, json;
      json = JSON.parse(this.req.responseText);
      console.log(json);
      this.objects = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = json.length; i < len; i++) {
          jewel = json[i];
          results.push({
            geometry: this.buildGeometry(jewel.geometry),
            material: this.buildMaterial(jewel.color)
          });
        }
        return results;
      }).call(this);
      this.loaded = true;
      return this.onload();
    };

    Jewels.prototype.buildGeometry = function(def) {
      var geom, r, rx, s;
      geom = this.jsonloader.parse(def).geometry;
      rx = new THREE.Matrix4().makeRotationX(Math.PI / 2);
      s = new THREE.Matrix4().makeScale(this.scalefactor, this.scalefactor, this.scalefactor);
      r = new THREE.Matrix4().multiplyMatrices(rx, s);
      geom.applyMatrix(r);
      return new THREE.BufferGeometry().fromGeometry(geom);
    };

    Jewels.prototype.buildMaterial = function(color) {
      return new THREE.MeshPhongMaterial({
        color: color,
        ambient: color,
        shininess: 50
      });
    };

    Jewels.prototype.random = function() {
      var j;
      j = this.objects[Math.floor(Math.random() * this.objects.length)];
      return new THREE.Mesh(j.geometry, j.material);
    };

    Jewels.prototype.load = function() {
      var i, id, len, ref, results;
      ref = this.list;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        id = ref[i];
        results.push(new Jewel(id));
      }
      return results;
    };

    Jewels.prototype.onload = function() {};

    return Jewels;

  })();

  Logger = (function() {
    function Logger() {
      this.loglines = [];
    }

    Logger.prototype.log = function(text) {
      this.loglines.push(text);
      return document.getElementById('log').innerText = this.loglines.join("\n");
    };

    return Logger;

  })();

}).call(this);
